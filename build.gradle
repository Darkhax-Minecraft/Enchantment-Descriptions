buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.diluv.schoomp', name: 'Schoomp', version: '1.1.0'
    }
}

plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'maven-publish'
}

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/secrets.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/markdown-git-changelog.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/patreon.gradle'

import com.diluv.schoomp.Webhook
import com.diluv.schoomp.message.Message
import com.diluv.schoomp.message.embed.Embed

if (project.hasProperty('secretFile')) {
    loadSecrets(new File((String) findProperty('secretFile')))
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = "${project.mod_name}-fabric-${project.minecraft_version}"
version = project.mod_version + ".${getBuildNumber()}"

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.mod_version
    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

tasks.withType(JavaCompile) {
    it.options.encoding = 'UTF-8'
    it.options.release = 16
}


curseforge {
    apiKey = findProperty('curse_auth') ?: 0
    def versions = "${curse_versions}".split(', ')

    project {
        id = "${curse_project}"
        releaseType = 'beta'
        changelog = getGitChangelog() + "\n\nLike the mod? Consider following me on [Twitter](https://twitter.com/darkhaxdev) and joining the [Discord](https://discord.darkhax.net)\n\nHuge thanks to my supporters on [Patreon](https://www.patreon.com/Darkhax?MCChangelog?${mod_name})\n\n" + getPledgeLog()
        changelogType = 'markdown'
        addGameVersion "Fabric"

        versions.each {
            addGameVersion "${it}"
        }

        mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))

        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

tasks.getByName("curseforge").doLast {
    try {
        // Reads the file ID given to us by CurseForge
        def newFileId = tasks.getByName("curseforge${curse_project}").property('mainArtifact').fileID

        def webhook = new Webhook(findProperty('discordCFWebhook'), "${project.findProperty('mod_name')} Gradle Upload")

        def message = new Message()
        message.setUsername(findProperty('mod_name'))
        message.setContent("${project.findProperty('mod_name')} ${version} (Fabric) for Minecraft ${findProperty('minecraft_version')} has been released! The download will be public soon.")

        def embed = new Embed()
        embed.addField('Download', "${project.findProperty('curse_page')}/files/$newFileId", false)
        embed.addField('Change Log', "${getGitChangelog() ?: 'Unavailable :('}", false)
        embed.setColor(0xFF8000)
        message.addEmbed(embed)

        webhook.sendMessage(message)
    }

    catch (IOException ignored) {
        System.out.println 'Failed to push to the Discord webhook.'
    }
}

java {
	withSourcesJar()
}

publishing {
    publications {
		mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
    repositories {
        maven {
            // Sets the maven URL
            url findProperty('localMaven')
        }
    }
}

static String getBuildNumber() {
    return System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : System.getenv('TRAVIS_BUILD_NUMBER') ? System.getenv('TRAVIS_BUILD_NUMBER') : '0'
}

jar {
    manifest {
        attributes([
            'Timestamp': System.currentTimeMillis(),
            'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            'Built-On-Minecraft': project.findProperty('minecraft_version'),
            'Built-On-Fabric': project.findProperty('loader_version'),
            'Built-On-Mapping': "yarn-${project.findProperty('yarn_mappings')}",
            'Built-On-Gradle': gradle.gradleVersion,
            'Built-On-Loom': buildscript.configurations.classpath.dependencies.find({ it.name.contains('fabric-loom') }).version,
            'ModLoader': "fabric-${project.findProperty('loader_version')}",
        ])
    }
}
