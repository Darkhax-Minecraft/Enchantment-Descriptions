buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish' 
apply plugin: 'eclipse'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/secrets.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/markdown-git-changelog.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/artifacts.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/maven_nomcp.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/patreon.gradle'

import net.minecraftforge.gradle.common.task.SignJar
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

if (project.hasProperty('secretFile')) {
    loadSecrets(new File((String) findProperty('secretFile')))
}

version = "${mod_version}" + getBuildNumber()
archivesBaseName = "${mod_name}-${minecraft_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {

    mappings channel: 'snapshot', version: "${mcp_version}".toString()
	
    if (project.hasProperty('mod_at')) {
    
        accessTransformer = file(findProperty('mod_at'))
    }
	
    runs {
        client {
		
            workingDirectory project.file('run')
			taskName "${mod_name}".replaceAll("\\s","") + 'Client'

            mods {
                enchdesc {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
			taskName "${mod_name}".replaceAll("\\s","") + 'Server'
			
            mods {
                enchdesc {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {

    maven {

        url 'http://maven.mcmoddev.com'
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${forge_version}"
    
    compile fg.deobf("net.darkhax.bookshelf:Bookshelf-1.16.2:${bookshelf_version}")
}

jar {
    manifest {
        attributes([
            'Timestamp': System.currentTimeMillis(),
            'Specification-Title': "${mod_name}",
            'Specification-Vendor': "${mod_vendor}",
            'Specification-Version': "${version}",
            'Implementation-Title': project.archivesBaseName,
            'Implementation-Version': project.version,
            'Implementation-Vendor' :"${mod_vendor}",
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            'Built-On': "${forge_version}"
        ])
    }
}

String getBuildNumber() {

    return System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : System.getenv('TRAVIS_BUILD_NUMBER') ? System.getenv('TRAVIS_BUILD_NUMBER') : '0';
}

processResources {

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        def credits = "Thanks to my supporters on Patreon. "

        def patreonSupporters = new ArrayList<String>()

        for (entry in getPledges()) {

            def pledge = entry.getValue();

            if (pledge.isValid()) {

                patreonSupporters.add(pledge.getDisplayName())
            }
        }

        credits += patreonSupporters.join(', ')

        expand 'version': project.version, 'mod_name': mod_name, 'mod_download': mod_download, 'mod_credits': credits, 'mod_authors': mod_authors, 'mod_description': mod_description
    }

    from(sourceSets.main.resources.srcDirs) {
    
        exclude 'META-INF/mods.toml'
    }
}

curseforge {

    apiKey = findProperty('curse_auth') ?: 0 
    def versions = "${curse_versions}".split(', ')
    project {

        id = "${curse_project}"
        releaseType = 'alpha'
        changelog = getGitChangelog() + "\n\nLike the mod? Consider following me on [Twitter](https://twitter.com/darkhaxdev) and joining the [Discord](https://discord.darkhax.net)\n\nHuge thanks to my supporters on [Patreon](https://www.patreon.com/Darkhax?MCChangelog?${mod_name})\n\n" + getPledgeLog()
        changelogType = 'markdown'

        versions.each {

            addGameVersion "${it}"
        }

        if (project.hasProperty('curse_requirements') || project.hasProperty('curse_optionals')) {

            mainArtifact(jar) {

                relations {

                    if (project.hasProperty('curse_requirements')) {
                        def requirements = "${curse_requirements}".split(', ')
                        requirements.each {

                            requiredLibrary "${it}"
                        }
                    }

                    if (project.hasProperty('curse_optionals')) {
                        def optionals = "${curse_optionals}".split(', ')
                        optionals.each {

                            optionalLibrary "${it}"
                        }
                    }
                }
            }
        }

        addArtifact(sourcesJar)
        addArtifact(javadocJar)
        addArtifact(deobfJar)
    }
}

task signJar(type: SignJar, dependsOn: jar) {

    onlyIf {
    
        project.hasProperty('keyStore')
    }
    
	if (project.hasProperty('keyStore')) {
	
	    project.logger.lifecycle('Signing jar ' + jar.archivePath.getName());
	
        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStoreKeyPass')
        inputFile = jar.archivePath
        outputFile = jar.archivePath
	}
	
	else {
	
	    project.logger.lifecycle('Could not sign ' + jar.archivePath.getName() + '. No keyStore property could be found')
	}
}

//build.dependsOn signJar

tasks.getByName("curseforge").doLast {
    
    try {
        // Reads the file ID given to us by CurseForge
        def newFileId = tasks.getByName("curseforge${curse_project}").property('mainArtifact').fileID
    
        // The payload body for the message sent to the Discord webhook.
        def body = [
            'username': project.findProperty('mod_name'),
            'embeds': [
                [
                    'description': "${project.findProperty('mod_name')} ${version} for Minecraft ${project.findProperty('curse_versions')} has been released! The download will be available once CurseForge has reviewed the file.",
                    'fields': [
                        [
                            'name': 'Download',
                            'value': "${project.findProperty('curse_page')}/files/$newFileId",
                            'inline': false
                        ],
                        [
                            'name': 'Changelog',
                            'value': "${getGitChangelog() ?: 'Unavailable :('}",
                            'inline': false
                        ]
                    ]
                ]
            ]
        ]

        // Opens a connection to Discord's webhook and writes the payload JSON.
        def req = new URL(project.findProperty('discordCFWebhook')).openConnection()
        req.setRequestMethod('POST')
        req.setRequestProperty('Content-Type', 'application/json; charset=UTF-8')
        req.setRequestProperty('User-Agent', "${project.findProperty('mod_name')} CF Gradle Webhook")
        req.setDoOutput(true)
        req.getOutputStream().write(JsonOutput.toJson(body).getBytes("UTF-8"))

        // We need to attempt a read in order to actually send the message.
        println "Discord Status code: ${req.getResponseCode()}"
        println "Discord Webhook Response: ${req.getInputStream().getText()}"
    }
    
    catch (IOException e) {
        println 'Failed to push to the Discord webhook.'
    }
}


task updateVersionTracker {

    onlyIf {
    
        project.hasProperty('versionTrackerAPI')
    }
    
    doLast {
        def body = [
            'author': "${project.findProperty('mod_vendor')}",
            'projectName': "${project.findProperty('mod_name').toLowerCase()}",
            'gameVersion': "${project.findProperty('minecraft_version')}",
            'projectVersion': "${version}",
            'homepage': "${project.findProperty('mod_download')}",
            'uid': "${project.findProperty('versionTrackerKey')}"
        ]
    
        // Opens a connection to the version tracker API and writes the payload JSON.
        def req = new URL(project.findProperty('versionTrackerAPI')).openConnection()
        req.setRequestMethod('POST')
        req.setRequestProperty('Content-Type', 'application/json; charset=UTF-8')
        req.setRequestProperty('User-Agent', "${project.findProperty('mod_name')} Tracker Gradle")
        req.setDoOutput(true)
        req.getOutputStream().write(JsonOutput.toJson(body).getBytes("UTF-8"))

        // We need to attempt a read in order to actually send the message.
        println "VersionCheck Status code: ${req.getResponseCode()}"
        println "VersionCheck Response: ${req.getInputStream().getText()}"
    }
}

task recompress(type:Exec, dependsOn: jar) {
    
    commandLine 'advzip', '-z', '-4', '-i 8', jar.archivePath.toString()
}